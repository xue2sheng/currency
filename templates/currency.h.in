/** @file currency.h
 * @brief C-friendly header to grab Euro/Dollar diary exchange rate from fixer.io (api for ECB exchange rates).
 *
 *  It will run as a detached thread that updates an atomic internal variable for the exchange rate.
 */

#ifndef CURRENCY_H
#define CURRENCY_H

/**
 * @example
 *
 * Don't forget to add at 'servers.ini' the following configuration lines:
 *
 * @code
 * [Currency]
 * ; 15 minutes is good enough because the previous fixer.io get its info from ECB not so often.
 * ; how often to query external sites for rates
 * minutes=15
 * @endcode
 *
 * Don't forget to call global init at least once before requesting for exchange rates.
 *
 * @code
 *       // check it out that header is not out of sync with libXXX.a
 *       assert(CURRENCY_IN_SYNC(CURRENCY_VERSION));
 *
 *       // only once in one place of the code
 *       currency_global_init();
 *
 *       // access to external servers could take some time
 *       std::this_thread::sleep_for(std::chrono::seconds(5));
 *
 *       // in another place in the code
 *       float eur = 1.345;
 *       double conversion { eur * currency_HKD() };
 *       std::cout << eur << " EUR = " << conversion << " HKD <-- " << (currency_last_query()?"crisp data":"stale data") << std::endl;
 * @endcode
 *
 */

#ifdef __cplusplus
extern "C" {
#endif

     // static constexpr const unsigned long long int CURRENCY_VERSION { 2017'05'04'18'14 };

     /// @brief Version info for future checks.
     /// @remark Generated by cmake
     static const unsigned long long int CURRENCY_VERSION = @HUMAN_SYNC_VERSION@;

     /**
      * @brief Check header & library version.
      * @param [in] version from header info.
      * @return true if success, false otherwise
      *
      * @remark Try to use with the pattern: assert(CURRENCY_IN_SYNC(CURRENCY_VERSION));
     */
     bool CURRENCY_IN_SYNC(const unsigned long long version);

     /// @brief Where to grab rate info.
     static constexpr const char * const CURRENCY_FIXER_URL {"http://api.fixer.io/latest"};
     static constexpr const char * const CURRENCY_ECB_URL {"http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml"};

     /// @brief Default minutes to wait between calls.
     static constexpr const unsigned int CURRENCY_MINUTES {15};

    /**
     * @brief Helper to initialise CURL library and internal global structures.
     * @param [in] minutes: Sleep time in minutes between calls to the external site.
     * @param [in] fake_url: Fake external site query used by UNIT TEST code.
     *
     * @remark Only provided a new url for unit testing. On that scenario, 'minutes' will be applied as 'seconds'.
     */
     void currency_global_init(const unsigned int minutes = CURRENCY_MINUTES, const char* const fake_url = nullptr);

     /**
      * @brief Helper to check it out that last query to some of the servers went successfully
      * @return true if success, false otherwise
      *
      * @remark before the very first query, it returns false
      */
     bool currency_last_query();

     /**
      * @brief Helper to check it out that last query to some of the servers went successfully
      * @param [out] year read for the last time.
      * @param [out] month read for the last time.
      * @param [out] day read for the last time.
      * @return true if success, false otherwise
      *
      * @remark before the very first query, it returns false and year, month & day probably will be zero.
      */
     bool currency_last_query_date(unsigned& year, unsigned& month, unsigned& day);

      /**
      * @brief Helper to USD (US dollar)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_USD();

      /**
      * @brief Helper to JPY (Japanese yen)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_JPY();

      /**
      * @brief Helper to BGN (Bulgarian lev)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_BGN();

     /**
      * @brief Helper to CZK (Czech koruna)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_CZK();

      /**
      * @brief Helper to DKK (Danish krone)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_DKK();

      /**
      * @brief Helper to GBP (Pound sterling)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_GBP();

      /**
      * @brief Helper to HUF (Hungarian forint)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_HUF();

      /**
      * @brief Helper to PLN (Polish zloty)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_PLN();

      /**
      * @brief Helper to RON (Romanian leu)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_RON();

      /**
      * @brief Helper to SEK (Swedish krona)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_SEK();

      /**
      * @brief Helper to CHF (Swiss franc)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_CHF();

      /**
      * @brief Helper to NOK (Norwegian krone)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_NOK();

      /**
      * @brief Helper to HRK (Croatian kuna)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_HRK();

      /**
      * @brief Helper to RUB (Russian rouble)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_RUB();

      /**
      * @brief Helper to TRY (Turkish lira)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_TRY();

      /**
      * @brief Helper to AUD (Australian dollar)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_AUD();

      /**
      * @brief Helper to BRL (Brazilian real)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_BRL();

      /**
      * @brief Helper to CAD (Canadian dollar)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_CAD();

      /**
      * @brief Helper to CNY (Chinese yuan renminbi)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_CNY();

      /**
      * @brief Helper to HKD (Hong Kong dollar)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_HKD();

      /**
      * @brief Helper to IDR (Indonesian rupiah)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_IDR();

      /**
      * @brief Helper to ILS (Israeli shekel)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_ILS();

      /**
      * @brief Helper to INR (Indian rupee)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_INR();

      /**
      * @brief Helper to KRW (South Korean won)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_KRW();

      /**
      * @brief Helper to MXN (Mexican peso)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_MXN();

      /**
      * @brief Helper to MYR (Malaysian ringgit)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_MYR();

      /**
      * @brief Helper to NZD (New Zealand dollar)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_NZD();

      /**
      * @brief Helper to PHP (Philippine peso)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_PHP();

      /**
      * @brief Helper to SGD (Singapore dollar)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_SGD();

      /**
      * @brief Helper to THB (Thai baht)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_THB();

      /**
      * @brief Helper to ZAR (South African rand)
      * @return rate exchange with EUR (Euro) as base.
      *
      * @remark check last query status to know whether data is stale or not.
      */
      float currency_ZAR();

#ifdef __cplusplus
}
#endif

#endif // CURRENCY_H
