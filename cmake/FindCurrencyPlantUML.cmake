#####################################################################
# Using PlantUML to generate diagrams out of remarks at code/readme #
#####################################################################

# PlantUML could be used for extra diagrams
if(EXISTS $ENV{PLANTUML})
    set(PLANTUML_DIR "$ENV{PLANTUML}")
elseif(EXISTS ${COMPILATIONDEP}/tools/plantuml)
    set(PLANTUML_DIR "${COMPILATIONDEP}/tools/plantuml")
elseif(EXISTS /opt/plantuml)
    set(PLANTUML_DIR "/opt/plantuml")
else()
    message(STATUS "PlantUML directory not found")
endif()

# Only launch PlantUML if it's told so
if(${LOCAL_CMAKE_PROJECT_NAME}_PLANTUML)
    message(STATUS "Trying to autogenerated or update embedded PlantUML diagrams")

# input
set(PLANTUML_JAR "${PLANTUML_DIR}/plantuml.jar")
set(IMAGES_DIR "${CMAKE_CURRENT_SOURCE_DIR}/images")
set(TEMPORARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/images")

# get ready temporary dir
if(NOT EXISTS ${TEMPORARY_DIR})
  file(MAKE_DIRECTORY "${TEMPORARY_DIR}")
endif(NOT EXISTS ${TEMPORARY_DIR})

# start processing images
if(NOT EXISTS ${PLANTUML_JAR})
  message(STATUS "Missing plantuml.jar")
else()
 find_package(Java)
 if(NOT Java_FOUND)
  message(STATUS "Missing java command")
 else()
    
  # check it out if DOT or GRAPHVIZ was installed 
  execute_process(
        COMMAND ${Java_JAVA_EXECUTABLE} -jar ${PLANTUML_JAR} -testdot
	    TIMEOUT 10
        RESULT_VARIABLE TESTDOT_RESULT
        OUTPUT_VARIABLE TESTDOT_OUTPUT
        ERROR_VARIABLE TESTDOT_ERROR
	    OUTPUT_STRIP_TRAILING_WHITESPACE
	    ERROR_STRIP_TRAILING_WHITESPACE
 )
 if("${TESTDOT_OUTPUT}" MATCHES ".*OK.*")
     message(STATUS "DOT seems to be properly installed")

 # create temporary images
 execute_process(
        COMMAND ${Java_JAVA_EXECUTABLE} -jar ${PLANTUML_JAR} -r -o ${TEMPORARY_DIR} 
        *.md 
        images/*.md
        cmake/*.md
        templates/*.md templates/*.cpp templates/*.h templates/*.hpp templates/*.go
        src/*.md src/*.cpp src/*.h src/*.hpp src/*.go
        test/*.md test/*.cpp test/*.h test/*.hpp test/*.go
        mock/*.md mock/*.cpp mock/*.h mock/*.hpp mock/*.go
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	TIMEOUT 60
	RESULT_VARIABLE RESULT
	OUTPUT_VARIABLE OUTPUT
	ERROR_VARIABLE ERROR
	OUTPUT_STRIP_TRAILING_WHITESPACE
	ERROR_STRIP_TRAILING_WHITESPACE
 )

 # checkout it's not a new image
 file(GLOB TEMPORARY_LIST ${TEMPORARY_DIR}/*.png)
 file(GLOB IMAGES_LIST ${IMAGES_DIR}/*.png)
 foreach(i ${TEMPORARY_LIST})
  get_filename_component(TEMPORARY_IMAGE ${i} NAME)
  set(CANDIDATE "${IMAGES_DIR}/${TEMPORARY_IMAGE}")
  if(NOT EXISTS ${CANDIDATE})
    # it's new; just copy it to destination
    message(STATUS "New diagram: ${CANDIDATE}")
    file(COPY ${i} DESTINATION ${IMAGES_DIR})
  else()
    # exists but probably there were not changes and so nothing to do
    message(STATUS "Already exists ${CANDIDATE}")

    # first of all, get metadata from this candidate
    execute_process( 
	COMMAND ${Java_JAVA_EXECUTABLE} -jar ${PLANTUML_JAR} -metadata ${i} 
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
	TIMEOUT 10
	RESULT_VARIABLE TEMPORARY_RESULT
	OUTPUT_VARIABLE TEMPORARY_OUTPUT
	ERROR_VARIABLE TEMPORARY_ERROR
	OUTPUT_STRIP_TRAILING_WHITESPACE
	ERROR_STRIP_TRAILING_WHITESPACE
   )
   if(NOT TEMPORARY_ERROR)
    get_filename_component(IMAGE_NAME ${i} NAME)
    string(REGEX REPLACE "@enduml.*" "" TEMPORARY_METAINFO ${TEMPORARY_OUTPUT})
    string(REGEX REPLACE ".*@startuml{${IMAGE_NAME}}" "" TEMPORARY_METAINFO ${TEMPORARY_METAINFO})

    # as well destination metainfo is needed in order to be able to compare    
    execute_process( 
	COMMAND ${Java_JAVA_EXECUTABLE} -jar ${PLANTUML_JAR} -metadata ${CANDIDATE} 
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
	TIMEOUT 10
	RESULT_VARIABLE CANDIDATE_RESULT
	OUTPUT_VARIABLE CANDIDATE_OUTPUT
	ERROR_VARIABLE CANDIDATE_ERROR
	OUTPUT_STRIP_TRAILING_WHITESPACE
	ERROR_STRIP_TRAILING_WHITESPACE
    )
    if(NOT CANDIDATE_ERROR)

      get_filename_component(IMAGE_NAME ${CANDIDATE} NAME)
      string(REGEX REPLACE "@enduml.*" "" CANDIDATE_METAINFO ${CANDIDATE_OUTPUT})
      string(REGEX REPLACE ".*@startuml{${IMAGE_NAME}}" "" CANDIDATE_METAINFO ${CANDIDATE_METAINFO})

      # do something only if they are different
      string(COMPARE EQUAL "${TEMPORARY_METAINFO}" "${CANDIDATE_METAINFO}" IS_THE_SAME)
      if( IS_THE_SAME )
        message(STATUS "Nothing has changed at ${CANDIDATE}")
      else()
        message(STATUS "Modified diagram: ${CANDIDATE}")
        file(COPY ${i} DESTINATION ${IMAGES_DIR})
      endif( IS_THE_SAME )

    endif(NOT CANDIDATE_ERROR)
    
   endif(NOT TEMPORARY_ERROR)
 
   endif(NOT EXISTS ${CANDIDATE})
  endforeach(i ${TEMPORARY_LIST})

 else()
     message(STATUS "Missing required DOT in ordr to generate PlantUML diagrams")
 endif("${TESTDOT_OUTPUT}" MATCHES ".*OK.*")

 endif(NOT Java_FOUND)
endif(NOT EXISTS ${PLANTUML_JAR})

else()
  message(STATUS "Skipped embedded PlantUML diagrams processing")
endif(${LOCAL_CMAKE_PROJECT_NAME}_PLANTUML)
